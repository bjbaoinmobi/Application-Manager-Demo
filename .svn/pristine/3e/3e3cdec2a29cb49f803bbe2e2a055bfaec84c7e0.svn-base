package com.itheima.mobilesafe;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import net.tsz.afinal.FinalHttp;
import net.tsz.afinal.http.AjaxCallBack;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.animation.AlphaAnimation;
import android.widget.TextView;
import android.widget.Toast;

import com.itheima.mobilesafe.utils.StreamTools;

public class SplashActivity extends Activity {
	protected static final String TAG = "SplashActivity";

	protected static final int ENTER_HOME = 0;

	protected static final int SHOW_UPDATE_DIALOG = 1;

	protected static final int URL_ERROR = 2;

	protected static final int NETWORK_ERROR = 3;

	protected static final int JSON_ERROR = 4;

	private TextView tv_splash_version;

	/**
	 * 版本的描述信息
	 */
	private String description;
	/**
	 * apk下载地址
	 */
	private String apkurl;

	private TextView tv_updateinfo;

	private SharedPreferences sp;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_splash);
		tv_splash_version = (TextView) findViewById(R.id.tv_splash_version);
		tv_splash_version.setText("版本号：" + getVersionName());
		tv_updateinfo = (TextView) findViewById(R.id.tv_updateinfo);
		sp = getSharedPreferences("config", MODE_PRIVATE);
		boolean update = sp.getBoolean("update", false);
		// 数据的初始化--拷贝数据库
		installShortcut();
		copyDB("address.db");
		copyDB("commonnum.db");
		if (update) {
			// 升级已经打开，或者说升级已经勾选
			checkUpdate();
		} else {
			// 升级没有打开，进入主页面 停留2秒
			handler.postDelayed(new Runnable() {

				@Override
				public void run() {
					enterHome();// 进入主页面
				}
			}, 2000);

		}

		AlphaAnimation aa = new AlphaAnimation(0.1f, 1.0f);
		aa.setDuration(600);
		findViewById(R.id.rl_splash_root).startAnimation(aa);
	}

	/**
	 * 创建快捷键
	 */
	private void installShortcut() {
		if(sp.getBoolean("installedshortcut", false)){
			return;
		}
		
		//定义快捷键的意图
		Intent intent = new Intent();
		intent.setAction("com.android.launcher.action.INSTALL_SHORTCUT");
		intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, "手机卫士");//快捷键的名称
		//快捷键的图标
		intent.putExtra(Intent.EXTRA_SHORTCUT_ICON, BitmapFactory
				.decodeResource(getResources(), R.drawable.callmsgsafe));
		
		//你要我干什么呀
		//点击进入主页面
		Intent intentHome = new Intent();
		intentHome.setAction("com.itheima.mobilesafe.home");
		intentHome.addCategory("android.intent.category.DEFAULT");
		
		intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, intentHome);
		
		sendBroadcast(intent);
		
		Editor editor = sp.edit();
		editor.putBoolean("installedshortcut", true);
		editor.commit();

	}

	/**
	 * 
	 * assets资源目录下的address.db拷贝到data/data/com.itheima.mobilesafe/files/address
	 * .db
	 */
	private void copyDB(String dbName) {

		try {

			File file = new File(getFilesDir(), dbName);
			if (file.exists() && file.length() > 0) {
				// 拷贝成功了，不需要拷贝了
				Log.i(TAG, "拷贝成功了，不需要拷贝了");
			} else {
				InputStream is = getAssets().open(dbName);

				FileOutputStream fos = new FileOutputStream(file);
				byte[] buffer = new byte[1024];
				int len = 0;
				while ((len = is.read(buffer)) != -1) {
					fos.write(buffer, 0, len);
				}
				fos.close();
				is.close();
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case ENTER_HOME:// 进入主页面
				enterHome();
				break;
			case SHOW_UPDATE_DIALOG:// 弹出升级对话框
				Log.i(TAG, "有新版本了，弹出升级对话框");
				showUpdateDialog();
				break;
			case URL_ERROR:// URL错误
				Toast.makeText(getApplicationContext(), "URL错误", 0).show();
				enterHome();
				break;

			case NETWORK_ERROR:// 网络异常
				enterHome();
				Toast.makeText(SplashActivity.this, "网络异常", 0).show();
				break;

			case JSON_ERROR:// JSON解析异常
				enterHome();
				Toast.makeText(SplashActivity.this, "JSON解析异常", 0).show();
				break;

			}

		};
	};

	/**
	 * 检查升级
	 */
	private void checkUpdate() {
		new Thread() {
			public void run() {
				long startTime = System.currentTimeMillis();
				// URL http://192.168.1.100:8080/updateinfo.html
				Message message = Message.obtain();
				try {
					URL url = new URL(getResources().getString(
							R.string.serverurl));
					HttpURLConnection connection = (HttpURLConnection) url
							.openConnection();
					connection.setRequestMethod("GET");
					connection.setConnectTimeout(4000);
					int code = connection.getResponseCode();// 响应码
					if (code == 200) {
						// 联网成功
						InputStream is = connection.getInputStream();
						// 面向组件编程
						String result = StreamTools.readFromStream(is);
						Log.i(TAG, "数据：" + result);

						// JSON解析
						JSONObject jsonObject = new JSONObject(result);
						// 服务器的最新版本
						String version = (String) jsonObject.get("version");
						description = (String) jsonObject.get("description");
						apkurl = (String) jsonObject.get("apkurl");

						// 判断是否有新的版本
						if (getVersionName().equals(version)) {
							// 版本一致，不需要升级 --进入主页面
							message.what = ENTER_HOME;
						} else {
							// 有新版本，弹出对话框，由用户选择是否升级
							message.what = SHOW_UPDATE_DIALOG;
						}
					}

				} catch (MalformedURLException e) {
					e.printStackTrace();
					message.what = URL_ERROR;
				} catch (IOException e) {
					e.printStackTrace();
					message.what = NETWORK_ERROR;
				} catch (JSONException e) {
					e.printStackTrace();
					message.what = JSON_ERROR;
				} finally {

					long endTime = System.currentTimeMillis();
					long dTime = endTime - startTime;
					if (dTime < 2000) {
						try {
							Thread.sleep(2000 - dTime);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					handler.sendMessage(message);
				}
			};
		}.start();

	}

	protected void showUpdateDialog() {
		// this 等价于SplashActivity.this
		AlertDialog.Builder builder = new Builder(SplashActivity.this);
		builder.setTitle("升级提醒");
		// builder.setCancelable(false);//强制升级

		builder.setOnCancelListener(new OnCancelListener() {

			@Override
			public void onCancel(DialogInterface dialog) {
				// 但单击返回的时候
				enterHome();

			}
		});
		builder.setMessage(description);
		builder.setPositiveButton("立刻升级", new OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				// 下载新的APK 替换安装
				if (Environment.getExternalStorageState().equals(
						Environment.MEDIA_MOUNTED)) {
					// aFinal
					FinalHttp http = new FinalHttp();
					http.download(apkurl, Environment
							.getExternalStorageDirectory().getAbsolutePath()
							+ "/mobilesafe2.0.apk", new AjaxCallBack<File>() {

						@Override
						public void onFailure(Throwable t, int errorNo,
								String strMsg) {
							t.printStackTrace();
							super.onFailure(t, errorNo, strMsg);
							Toast.makeText(getApplicationContext(), "下载失败", 0)
									.show();
						}

						@Override
						public void onLoading(long count, long current) {
							super.onLoading(count, current);
							tv_updateinfo.setVisibility(View.VISIBLE);
							int progress = (int) (current * 100 / count);

							tv_updateinfo.setText("下载进度：" + progress + "%");
						}

						@Override
						public void onSuccess(File t) {
							super.onSuccess(t);
							installAPK(t);
						}

						/**
						 * 安装APK
						 * 
						 * @param t
						 */
						private void installAPK(File t) {
							Intent intent = new Intent();
							intent.setAction("android.intent.action.VIEW");
							intent.addCategory("android.intent.category.DEFAULT");
							intent.setDataAndType(Uri.fromFile(t),
									"application/vnd.android.package-archive");
							startActivity(intent);

						}

					});

				} else {
					Toast.makeText(SplashActivity.this, "sd卡不可用", 0).show();
				}

			}
		});
		builder.setNegativeButton("下次再说", new OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				enterHome();
			}
		});
		// 显示对话框
		builder.show();

	}

	/**
	 * 进入主页面
	 */
	protected void enterHome() {
		Intent intent = new Intent(this, HomeActivity.class);
		startActivity(intent);
		// 把当前页面关闭掉
		finish();

	}

	/**
	 * 得到当前软件的版本名称
	 */

	private String getVersionName() {
		// 包的的管理器
		PackageManager pm = getPackageManager();
		// 得到功能清单文件
		try {
			PackageInfo packInfo = pm.getPackageInfo(getPackageName(), 0);
			return packInfo.versionName;
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return "";
		}

	}

}
